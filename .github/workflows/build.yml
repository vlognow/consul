name: build

on:
  push:
    branches:
      - mfy-1.14.5

env:
  PKG_NAME: consul

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      product-date: ${{ steps.get-product-version.outputs.product-date }}
      pre-version: ${{ steps.get-product-version.outputs.pre-version }}
      pkg-version: ${{ steps.get-product-version.outputs.pkg-version }}
      shared-ldflags: ${{ steps.shared-ldflags.outputs.shared-ldflags }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to get the appropriate tags
      - name: get product version
        id: get-product-version
        run: |
          CONSUL_VERSION=$(build-support/scripts/version.sh -r)
          CONSUL_DATE=$(build-support/scripts/build-date.sh)
          ## TODO: This assumes `make version` outputs 1.1.1+ent-prerel
          IFS="+" read VERSION _other <<< "$CONSUL_VERSION"
          IFS="-" read _other PREREL_VERSION <<< "$CONSUL_VERSION"
          ## TODO: this assumes `version.sh` outputs in the expected ordering of
          ##       [version]+ent{-prerelease}  If we need to transition to
          ##       [version]{-prerelease}+ent before then, we'll need to add
          ##       logic to handle presense/absence of the prerelease
          echo "::set-output name=product-version::${CONSUL_VERSION}"
          echo "::set-output name=product-date::${CONSUL_DATE}"
          echo "::set-output name=pre-version::${PREREL_VERSION}"
          echo "::set-output name=pkg-version::${VERSION}"

      - name: Set shared -ldflags
        id: shared-ldflags
        run: |
          T="github.com/hashicorp/consul/version"
          echo "::set-output name=shared-ldflags::-X ${T}.GitCommit=${GITHUB_SHA::8} -X ${T}.GitDescribe=${{ steps.get-product-version.outputs.product-version }} -X ${T}.BuildDate=${{ steps.get-product-version.outputs.product-date }}"

  build:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {go: "1.20.1", goos: "linux", goarch: "amd64"}
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Setup with node and yarn
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: 'ui/yarn.lock'

      - name: Build UI
        run: |
          CONSUL_VERSION=${{ needs.get-product-version.outputs.product-version }}
          CONSUL_DATE=${{ needs.get-product-version.outputs.product-date }}
          CONSUL_BINARY_TYPE=${CONSUL_BINARY_TYPE}
          CONSUL_COPYRIGHT_YEAR=$(git show -s --format=%cd --date=format:%Y HEAD)
          echo "consul_version is ${CONSUL_VERSION}"
          echo "consul_date is ${CONSUL_DATE}"
          echo "consul binary type is ${CONSUL_BINARY_TYPE}"
          echo "consul copyright year is ${CONSUL_COPYRIGHT_YEAR}"
          cd ui && make && cd ..
          rm -rf agent/uiserver/dist
          mv ui/packages/consul-ui/dist agent/uiserver/
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
          GOLDFLAGS: "${{needs.get-product-version.outputs.shared-ldflags}}"
        run: |
          mkdir dist out
          go build -ldflags="$GOLDFLAGS" -o dist/ .
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.KLIP_AWS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.KLIP_AWS_SECRETKEY }}
      - name: Upload binary to s3
        run: |
          aws s3 --region us-east-1 cp out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip s3://machinifydeploy/shared/latest/downloads/

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-docker:
    name: Docker ${{ matrix.arch }} build
    needs:
      - get-product-version
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
    env:
      repo: consul
      version: ${{needs.get-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.DRONE_AWS_ECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.DRONE_AWS_ECR_SECRETKEY }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
        with:
          aws-region: us-east-1

      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: default
          arch: ${{matrix.arch}}
          tags: |
            677637302876.dkr.ecr.us-east-1.amazonaws.com/${{env.repo}}:${{env.version}}
          smoke_test: .github/scripts/verify_docker.sh v${{ env.version }}
      - name: Publish image to ECR
        run: |
          docker push 677637302876.dkr.ecr.us-east-1.amazonaws.com/${{env.repo}}:${{env.version}}

  verify-linux:
    needs:
      - get-product-version
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
      fail-fast: true
    env:
      version: ${{ needs.get-product-version.outputs.product-version }}
      zip_name: consul_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip

    name: Verify ${{ matrix.arch }} linux binary
    steps:
      - uses: actions/checkout@v2

      - name: Download ${{ matrix.arch  }} zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.zip_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ matrix.arch == 'arm' || matrix.arch == 'arm64' }}
        with:
          # this should be a comma-separated string as opposed to an array
          platforms: arm,arm64

      - name: Run verification for ${{ matrix.arch }} binary
        run: .github/scripts/verify_artifact.sh ${{ env.zip_name }} v${{ env.version }}
